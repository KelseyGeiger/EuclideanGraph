#ifndef KDTREE_IMPL
#define KDTREE_IMPL

inline EuclideanGraph::KDTree::~KDTree() {
    delete root;
}

inline Vec2D EuclideanGraph::KDTree::get_point(size_t idx) const {
    return owner.points.at(idx);
}

inline size_t EuclideanGraph::KDTree::nearest_neighbor(Vec2D point) const {
    if(root) {
        return root->nearest_neighbor(point, root->separator);
    } else {
        return (size_t)(-1);
    }
}

inline std::vector<size_t> EuclideanGraph::KDTree::k_nearest(Vec2D point, size_t k) const {
    if(root) {
        if(count <= k) {
            return root->get_children();
        } else {
            return root->k_nearest(point, k);
        }
    } else {
        return std::vector<size_t>();
    }
}

inline std::vector<size_t> EuclideanGraph::KDTree::radius_search(Vec2D point, double radius) const {
    if(root) {
        return root->radius_search(point, radius);
    } else {
        return std::vector<size_t>();
    }
}

inline void EuclideanGraph::KDTree::insert(size_t idx) {
    if(root == NULL) {
        root = new KDTreeNode(*this, idx, 0);
    } else {
        root->insert(idx);
    }
    count++;
}

inline void EuclideanGraph::KDTree::insert(std::vector<size_t> points) {
    for(size_t i = 0; i < points.size(); i++) {
        insert(points[i]);
    }
}

inline void EuclideanGraph::KDTree::remove(size_t idx) {
    if(root != NULL) {
        if(root->separator == idx) {
            std::vector<size_t> to_reinsert = root->get_children();
            clear();

            insert(to_reinsert);
        } else {
            root->remove(idx);
        }
    }
    root->update_indices(idx);
}

inline void EuclideanGraph::KDTree::clear() {
    delete root;
    root = NULL;
    count = 0;
}

inline EuclideanGraph::KDTree::KDTreeNode::~KDTreeNode() {
    delete less;
    delete greater;
}

inline void EuclideanGraph::KDTree::KDTreeNode::insert(size_t idx) {
    size_t component = level % 2;
    Vec2D to_insert = owner.get_point(idx);
    Vec2D sep = owner.get_point(separator);

    if(to_insert[component] < sep[component]) {
        if(less != NULL) {
            less->insert(idx);
        } else {
            less = new KDTreeNode(owner, idx, level + 1);
        }
    } else {
        if(greater != NULL) {
            greater->insert(idx);
        } else {
            greater = new KDTreeNode(owner, idx, level + 1);
        }
    }
}

inline void EuclideanGraph::KDTree::KDTreeNode::insert(std::vector<size_t> points) {
    for(size_t i = 0; i < points.size(); i++) {
        insert(points[i]);
    }
}

inline void EuclideanGraph::KDTree::KDTreeNode::remove(size_t idx) {

    if(less != NULL && less->separator == idx) {
        std::vector<size_t> to_insert = less->get_children();
        delete less;
        less = NULL;

        insert(to_insert);
    } else if(greater != NULL && greater->separator == idx) {
        std::vector<size_t> to_insert = greater->get_children();
        delete greater;
        greater = NULL;

        insert(to_insert);
    } else {

        size_t component = level % 2;
        Vec2D to_find = owner.get_point(idx);
        Vec2D sep = owner.get_point(separator);

        if(to_find[component] < sep[component]) {
            if(less != NULL) {
                less->remove(idx);
            } else {
                return;
            }
        } else {
            if(greater != NULL) {
                greater->remove(idx);
            } else {
                return;
            }
        }
    }
}

inline std::vector<size_t> EuclideanGraph::KDTree::KDTreeNode::get_children() const {
    std::vector<size_t> child_points;

    if(less != NULL) {
        std::vector<size_t> less_child = less->get_children();
        size_t median = less_child.size() / 2;

        for(size_t i = 0; i < median; i++) {
            child_points.push_back(less_child[i]);
        }

        child_points.push_back(less->separator);

        for(size_t i = median; i < less_child.size(); i++) {
            child_points.push_back(less_child[i]);
        }
    }

    if(greater != NULL) {
        std::vector<size_t> greater_child = greater->get_children();
        size_t median = greater_child.size() / 2;

        for(size_t i = 0; i < median; i++) {
            child_points.push_back(greater_child[i]);
        }

        child_points.push_back(greater->separator);

        for(size_t i = median; i < greater_child.size(); i++) {
            child_points.push_back(greater_child[i]);
        }
    }

    return child_points;
}

inline void EuclideanGraph::KDTree::KDTreeNode::update_indices(size_t idx) {
    if(less != NULL) {
        less->update_indices(idx);
    }

    if(separator > idx) {
        separator--;
    }

    if(greater != NULL) {
        greater->update_indices(idx);
    }
}

//Adapted from here: https://en.wikipedia.org/wiki/K-d_tree#Nearest_neighbour_search

inline size_t EuclideanGraph::KDTree::KDTreeNode::nearest_neighbor(Vec2D point, size_t current_best) const {

    //If this is a leaf, then the algorithm has searched to the closest point it can find.
    //So this is the initial current best, pass it up the call stack.

    if((less == NULL) && (greater == NULL)) {
        return separator;
    }

    Vec2D sep = owner.get_point(separator);
    size_t component = (level % 2);

    //At this point, we know this isn't a leaf, so recurse down the appropriate path- just like
    //the search done for insertion.

    if(point[component] < sep[component]) {
        if(less != NULL) {
            current_best = less->nearest_neighbor(point, current_best);
        }
    } else {
        if(greater != NULL) {
            current_best = greater->nearest_neighbor(point, current_best);
        }
    }

    //Now we try to see if we are the current best point- the splitting plane might have left the
    //current best a further euclidean distance away, even if closer by one component.
    //Using squared distance to eliminate some unnecessary calculations

    Vec2D best_pt = owner.get_point(current_best);
    double best_dist_sqr = distance_sqr(best_pt, point);
    double this_dist_sqr = distance_sqr(sep, point);

    if(this_dist_sqr < best_dist_sqr) {
        current_best = separator;
        best_dist_sqr = this_dist_sqr;
    }

    //Finally, we check to see if the radius describing the closest distance might pass the separating
    //axis.
    //If it does, then we have to check down the other side, which could still have a closer point.

    if((sep[component] - point[component]) * (sep[component] - point[component]) < best_dist_sqr) {
        if(point[component] < sep[component]) {
            if(greater != NULL) {
                current_best = greater->nearest_neighbor(point, current_best);
            }
        } else {
            if(less != NULL) {
                current_best = less->nearest_neighbor(point, current_best);
            }
        }
    }

    //We return whatever is the current best at this point, up the call stack.

    return current_best;
}

//Modified from nearest_neighbor, using some structure from radius_search

inline std::vector<size_t> EuclideanGraph::KDTree::KDTreeNode::k_nearest(Vec2D point, size_t k) const {
    std::vector<size_t> nearest;

    if(k == 0) {
        return nearest;
    }

    //If this is a leaf, automatically return a vector of size 1 with our separator

    if(less == NULL && greater == NULL) {
        nearest.push_back(separator);
        return nearest;
    }

    Vec2D sep = owner.get_point(separator);
    size_t component = (level % 2);

    if(point[component] < sep[component]) {
        if(less != NULL) {
            nearest = less->k_nearest(point, k);
        }
    } else {
        if(greater != NULL) {
            nearest = greater->k_nearest(point, k);
        }
    }

    if(nearest.size() < k) {
        if(point[component] < sep[component]) {
            if(greater != NULL) {
                std::vector<size_t> further = greater->k_nearest(point, k - nearest.size());

                for(size_t i = 0; i < further.size() && nearest.size() < k; i++) {
                    nearest.push_back(further[i]);
                }
            }
        } else {
            if(less != NULL) {
                std::vector<size_t> further = less->k_nearest(point, k - nearest.size());

                for(size_t i = 0; i < further.size() && nearest.size() < k; i++) {
                    nearest.push_back(further[i]);
                }
            }
        }

        for(size_t i = 0; i < nearest.size(); i++) {
            if(distance(sep, point) < distance(owner.get_point(nearest[i]), point)) {
                nearest.insert(nearest.begin()+i, separator);
                nearest.pop_back();
                break;
            }
        }

        return nearest;
    } else {



    }
}

inline std::vector<size_t> EuclideanGraph::KDTree::KDTreeNode::radius_search(Vec2D point, double radius) const {
    std::vector<size_t> in_rad;
    Vec2D sep = owner.get_point(separator);

    //If we can eliminate one side, do so.
    if(std::abs(sep[level%2] - point[level%2]) > radius) {
        if(point[level%2] < sep[level%2]) {
            if(less != NULL) {
                in_rad = less->radius_search(point, radius);
            }
        } else {
            if(greater != NULL) {
                in_rad = greater->radius_search(point, radius);
            }
        }
    } else {
        if(less != NULL) {
            std::vector<size_t> tmp = less->radius_search(point, radius);

            for(size_t i = 0; i < tmp.size(); i++) {
                in_rad.push_back(tmp[i]);
            }
        }

        if(greater != NULL) {
            std::vector<size_t> tmp = greater->radius_search(point, radius);

            for(size_t i = 0; i < tmp.size(); i++) {
                in_rad.push_back(tmp[i]);
            }
        }
    }

    double dist_sqr = distance_sqr(sep, point);

    //If the separator is in the bounds of the radius, add it.

    if(dist_sqr <= (radius*radius)) {
        in_rad.push_back(separator);
    }

    return in_rad;
}

#endif
