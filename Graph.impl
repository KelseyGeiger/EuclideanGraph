void EuclideanGraph::Graph::insert_vertex(size_t index) {
    vertices[index] = Vertex(index);
}

void EuclideanGraph::Graph::insert_edge(size_t from, size_t to) {
    Vec2D vec_f = get_point(from);
    Vec2D vec_t = get_point(to);

    edges.push_back(Edge(from, to, distance(vec_t, vec_f)));
    vertices[from].edge_indices.push_back(edges.size()-1);
    vertices[to].edge_indices.push_back(edges.size()-1);
}

void EuclideanGraph::Graph::insert(size_t index, double radius) {
    Vec2D point = get_point(index);
    std::vector<size_t> nearby = owner.radius_search(point, radius);

    vertices[index] = Vertex(index);

    for(int i = 0; i < nearby.size(); i++) {
        if(nearby[i] != index) {
            insert_edge(index, nearby[i]);
        }
    }
}


struct CompareCosts {
    bool operator()(const std::pair<size_t, double>& lhs, const std::pair<size_t, double>& rhs) const {
        return lhs.second < rhs.second;
    }
};

std::stack<Vec2D> EuclideanGraph::Graph::construct_path(const std::map<size_t, size_t>& pred, size_t current) const {
    std::stack<Vec2D> path;

    path.push(get_point(current));
    while(pred.find(current) != pred.end()) {
        current = pred.find(current)->second;
        path.push(get_point(current));
    }

    return path;
}

std::stack<Vec2D> EuclideanGraph::Graph::A_star(size_t from, size_t to) const {
    std::set<size_t> closed;
    std::set<size_t> open;
    std::map<size_t, size_t> predecessor;
    std::map<size_t, double> costs;
    std::map<size_t, double> estimated_costs;

    open.insert(from);
    costs[from] = 0;

    Vec2D from_pt = get_point(from);
    Vec2D goal_pt = get_point(to);

    estimated_costs[from] = distance(goal_pt, from_pt);

    while(!open.empty()) {
        size_t current = std::min_element(estimated_costs.begin(), estimated_costs.end(), CompareCosts())->first;

        if(open.find(current) == open.end()) {
            estimated_costs.erase(estimated_costs.find(current));
            continue;
        }

        if(current == to) {
            return construct_path(predecessor, current);
        }

        open.erase(open.find(current));
        closed.insert(current);

        for(int i = 0; i < vertices.at(current).edge_indices.size(); i++) {
            Edge neighbor_edge = edges.at(vertices.at(current).edge_indices.at(i));
            size_t neighbor = neighbor_edge.to;

            if(closed.find(neighbor) != closed.end()) {
                continue;
            }

            double tentative = costs[current] + neighbor_edge.weight;
            if(open.find(neighbor) == open.end()) {
                open.insert(neighbor);
            } else {
                if(tentative >= costs[neighbor]) {
                    continue;
                }
            }

            Vec2D neighbor_pt = get_point(neighbor);

            predecessor[neighbor] = current;
            costs[neighbor] = tentative;
            estimated_costs[neighbor] = tentative + distance(goal_pt, neighbor_pt);
        }
    }

    return std::stack<Vec2D>();
}

Vec2D EuclideanGraph::Graph::get_point(size_t idx) const {
    return owner.points.at(idx);
}

bool EuclideanGraph::Graph::Vertex::operator==(const Graph::Vertex& other) {
    return other.index == this->index;
}

bool EuclideanGraph::Graph::Vertex::operator!=(const Vertex& other) {
    return other.index != this->index;
}

bool EuclideanGraph::Graph::Vertex::operator<(const Vertex& other) {
    return other.index < this->index;
}

bool EuclideanGraph::Graph::Vertex::operator>(const Vertex& other) {
    return other.index > this->index;
}

bool EuclideanGraph::Graph::Vertex::operator<=(const Vertex& other) {
    return !(*this > other);
}

bool EuclideanGraph::Graph::Vertex::operator>=(const Vertex& other) {
    return !(*this < other);
}
