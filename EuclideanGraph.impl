//#include "EuclideanGraph.hpp"
#include <math.h>
#include <float.h>

#ifndef EUCLIDEANGRAPH_IMPL
#define EUCLIDEANGRAPH_IMPL

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

inline EuclideanGraph::EuclideanGraph() {
    pointTree = new KDTree(*this);
    graph = new Graph(*this);
}

inline EuclideanGraph::~EuclideanGraph() {
    delete pointTree;
    delete graph;
}

inline Vec2D EuclideanGraph::get_point(size_t index) const {
    return points.at(index);
}

inline void EuclideanGraph::adjust_points(Vec2D offset) {
    for(size_t i = 0; i < points.size(); i++) {
        points[i] = points[i] + offset;
    }
}

inline void EuclideanGraph::insert(Vec2D point, double radius) {
    points.push_back(point);

    if(radius > 0.0) {
        graph->insert(points.size()-1, radius);
    }

    pointTree->insert(points.size()-1);
}

inline void EuclideanGraph::remove(Vec2D point, double epsilon) {
    size_t nearest = pointTree->nearest_neighbor(point);

    if(nearest == (size_t)(-1)) {
        return;
    }

    Vec2D near_pt = get_point(nearest);
    Vec2D diff = (point - near_pt);

    if(mag(diff) > epsilon) {
        return;
    }

    remove(nearest);
}

inline void EuclideanGraph::remove(size_t index) {

    if(index > points.size()) {
        return;
    }

    graph->remove(index);
    pointTree->remove(index);

    //Stand-in for std::vector::erase() which seems to be broken for GCC
    for(size_t i = index; i < points.size() - 1; i++) {
        points[i] = points[i+1];
    }
    points.pop_back();
}

inline size_t EuclideanGraph::nearest_neighbor(Vec2D point) const {
    return pointTree->nearest_neighbor(point);
}

inline std::vector<size_t> EuclideanGraph::k_nearest(Vec2D point, size_t k) const {
    return pointTree->k_nearest(point, k);
}

inline std::vector<size_t> EuclideanGraph::radius_search(Vec2D point, double radius) const {
    return pointTree->radius_search(point, radius);
}

inline std::vector<Vec2D> EuclideanGraph::A_star(Vec2D start, Vec2D goal) const {
    if(pointTree->root != NULL) {
        size_t start_idx = nearest_neighbor(start);
        size_t goal_idx = nearest_neighbor(goal);

        return graph->A_star(start_idx, goal_idx);
    } else {
        return std::vector<Vec2D>();
    }
}

inline std::vector<Vec2D> EuclideanGraph::A_star_exclusive(Vec2D start, Vec2D goal, std::vector<Vec2D> excluded) const {
    if(excluded.size() == 0) {
        return A_star(start, goal);
    } else {
        if(pointTree->root != NULL) {
            size_t start_idx = nearest_neighbor(start);
            size_t goal_idx = nearest_neighbor(goal);

            std::vector<size_t> vertices;

            for(size_t i = 0; i < excluded.size(); i++) {
                vertices.push_back(nearest_neighbor(excluded[i]));
            }

            return graph->A_star_exclusive(start_idx, goal_idx, vertices);
        } else {
            return std::vector<Vec2D>();
        }
    }
}

inline void EuclideanGraph::clear() {
    pointTree->clear();
    graph->clear();
    points.clear();
}

inline size_t EuclideanGraph::size() const {
    return points.size();
}

#endif
