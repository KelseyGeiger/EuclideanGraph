double& Vec2D::operator[](size_t idx) {
    if((idx % 2) == 0) {
        return x;
    } else {
        return y;
    }
}

const double& Vec2D::operator[](size_t idx) const {
    if((idx % 2) == 0) {
        return x;
    } else {
        return y;
    }
}

double dot(Vec2D lhs, Vec2D rhs) {
    return (lhs.x * rhs.x) + (lhs.y * rhs.y);
}

double cross_2D(Vec2D lhs, Vec2D rhs) {
    return (lhs.x * rhs.y) - (lhs.y * rhs.x);
}

Vec2D perp(const Vec2D& v) {
    return Vec2D(v.y, -v.x);
}

double distance(Vec2D lhs, Vec2D rhs) {
    return (lhs-rhs).mag();
}

double distance_sqr(Vec2D lhs, Vec2D rhs) {
    return (lhs-rhs).mag_sqr();
}

double Vec2D::angle_rad() const {
    return std::atan2(y, x);
}

double Vec2D::mag_sqr() const {
    return (x * x) + (y * y);
}

double Vec2D::mag() const {
    return std::sqrt(mag_sqr());
}

Vec2D operator+(Vec2D lhs, const Vec2D& rhs) {
    return Vec2D(lhs.x + rhs.x, lhs.y + rhs.y);
}

Vec2D operator-(Vec2D lhs, const Vec2D& rhs) {
    return Vec2D(lhs.x - rhs.x, lhs.y - rhs.y);
}

Vec2D operator*(Vec2D lhs, const double& rhs) {
    return Vec2D(lhs.x * rhs, lhs.y * rhs);
}

Vec2D operator*(double lhs, const Vec2D& rhs) {
    return Vec2D(lhs * rhs.x, lhs * rhs.y);
}

Vec2D operator/(Vec2D lhs, const double& rhs) {
    return Vec2D(lhs.x / rhs, lhs.y / rhs);
}
